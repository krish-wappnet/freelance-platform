// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CLIENT
  FREELANCER
  ADMIN
}

enum ProjectStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum BidStatus {
  PENDING
  SHORTLISTED
  ACCEPTED
  REJECTED
}

enum ContractStage {
  PROPOSAL
  APPROVAL
  PAYMENT
  REVIEW
  COMPLETED
  CANCELLED
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  PAYMENT_REQUESTED
  PAID
}

// Key Features Enum
enum KeyFeature {
  AUTHENTICATION
  TASK_MANAGEMENT
  FILTERING
  RESPONSIVE_UI
  REST_API
  DOCUMENTATION
  SOURCE_CODE
  README
  DEPLOYMENT_INSTRUCTIONS
  LIVE_DEMO
}

// Project Type Enum
enum ProjectType {
  ONE_TIME
  CONTINUOUS
}

// Experience Level Enum
enum ExperienceLevel {
  BEGINNER
  INTERMEDIATE
  EXPERT
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  name          String
  role          UserRole
  bio           String?
  avatar        String?
  location      String?
  skills        String[]
  hourlyRate    Float?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Client relations
  postedProjects      Project[]       @relation("ClientToProject")
  
  // Freelancer relations
  bids                Bid[]
  contractsAsFreelancer Contract[] @relation("FreelancerToContract")
  
  // Common relations
  contractsAsClient   Contract[] @relation("ClientToContract")
  sentMessages        Message[]  @relation("SenderToMessage")
  receivedMessages    Message[]  @relation("ReceiverToMessage")
  notifications       Notification[]
  milestoneProgress   MilestoneProgress[]

  @@map("users")
}

model Project {
  id              String        @id @default(uuid())
  title           String
  description     String
  budget          Float
  deadline        DateTime?
  category        String
  skills          String[]
  status          ProjectStatus @default(OPEN)
  
  // Key Features
  features        KeyFeature[]  // Array of key features
  
  // Project Details
  type            ProjectType   @default(ONE_TIME)
  timelineWeeks   Int           @default(3)
  experienceLevel ExperienceLevel @default(INTERMEDIATE)
  
  // Deliverables
  deliverables    String[]      // Array of deliverables
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  clientId        String
  client          User          @relation("ClientToProject", fields: [clientId], references: [id])
  bids            Bid[]
  contracts       Contract[]
  milestones      Milestone[]

  @@map("projects")
}

model Bid {
  id              String      @id @default(uuid())
  amount          Float
  deliveryTime    Int         // In days
  coverLetter     String
  status          BidStatus   @default(PENDING)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  projectId       String
  project         Project     @relation(fields: [projectId], references: [id])
  freelancerId    String
  freelancer      User        @relation(fields: [freelancerId], references: [id])
  contract        Contract?

  @@map("bids")
}

model Contract {
  id              String        @id @default(uuid())
  title           String
  description     String
  amount          Float
  stage           ContractStage @default(PROPOSAL)
  paymentIntentId String?
  startDate       DateTime?
  endDate         DateTime?
  termsAccepted   Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  projectId       String
  project         Project       @relation(fields: [projectId], references: [id])
  clientId        String
  client          User          @relation("ClientToContract", fields: [clientId], references: [id])
  freelancerId    String
  freelancer      User          @relation("FreelancerToContract", fields: [freelancerId], references: [id])
  bidId           String?       @unique
  bid             Bid?          @relation(fields: [bidId], references: [id])
  milestones      Milestone[]
  payments        Payment[]
  
  @@map("contracts")
}

model Milestone {
  id              String           @id @default(cuid())
  title           String
  description     String
  amount          Float
  status          MilestoneStatus  @default(PENDING)
  dueDate         DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  completedAt     DateTime?
  
  // Relations
  contractId      String
  contract        Contract         @relation(fields: [contractId], references: [id])
  projectId       String
  project         Project          @relation(fields: [projectId], references: [id])
  progressUpdates MilestoneProgress[]
  payments        Payment[]
  freelancerId    String
  freelancer      User             @relation("FreelancerMilestones", fields: [freelancerId], references: [id])
  
  @@map("milestones")
}

enum NotificationType {
  PAYMENT_RECEIVED
  CONTRACT_COMPLETED
  MILESTONE_COMPLETED
  PAYMENT_FAILED
  CONTRACT_CREATED
  CONTRACT_UPDATED
  CONTRACT_DELETED
  MILESTONE_CREATED
  MILESTONE_UPDATED
  MILESTONE_DELETED
}

model Notification {
  id            String           @id @default(cuid())
  userId        String
  user          User             @relation(fields: [userId], references: [id])
  title         String
  message       String
  type          NotificationType
  isRead        Boolean          @default(false)
  referenceId   String?          // ID of the related entity (milestone, contract, etc.)
  referenceType String?          // Type of the related entity ('MILESTONE', 'CONTRACT', etc.)
  amount        Float?           // Amount for payment notifications
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@map("notifications")
}

model MilestoneProgress {
  id          String         @id @default(uuid())
  description String
  status      MilestoneStatus
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  // Relations
  milestoneId String
  milestone   Milestone      @relation(fields: [milestoneId], references: [id])
  userId      String
  user        User           @relation(fields: [userId], references: [id])
  
  @@map("milestone_progress")
}

model Message {
  id              String    @id @default(uuid())
  content         String
  isRead          Boolean   @default(false)
  createdAt       DateTime  @default(now())
  
  // Relations
  senderId        String
  sender          User      @relation("SenderToMessage", fields: [senderId], references: [id])
  receiverId      String
  receiver        User      @relation("ReceiverToMessage", fields: [receiverId], references: [id])

  @@map("messages")
}

model Payment {
  id              String         @id @default(cuid())
  amount          Float
  status          PaymentStatus  @default(PENDING)
  paymentIntentId String?        @unique
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  completedAt     DateTime?
  milestone       Milestone      @relation(fields: [milestoneId], references: [id])
  milestoneId     String
  contract        Contract       @relation(fields: [contractId], references: [id])
  contractId      String

  @@map("payments")
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}